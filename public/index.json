[{
      "title": "Django 入门",
      "permalink": "http://localhost:1313/docs/programming/frameworks/django/",
      "summary": "Django 入门 Django 是一个高级的 Python Web 框架，它鼓励快速开发和简洁、实用的设计。\nDjango 特点 快速开发 安全可靠 可扩展性强 完善的文档 安装 Django 使用 pip 安装 Django：\npip install django 创建项目 django-admin startproject mysite 创建应用 cd mysite python manage.py startapp blog 定义模型 # blog/models.py from django.db import models from django.utils import timezone class Post(models.Model): title = models.CharField(max_length=200) content = models.TextField() published_date = models.DateTimeField(default=timezone.now) def __str__(self): return self.title 创建视图 # blog/views.py from django.shortcuts import render from .models import Post def post_list(request): posts = Post.",
      "content": "Django 入门 Django 是一个高级的 Python Web 框架，它鼓励快速开发和简洁、实用的设计。\nDjango 特点 快速开发 安全可靠 可扩展性强 完善的文档 安装 Django 使用 pip 安装 Django：\npip install django 创建项目 django-admin startproject mysite 创建应用 cd mysite python manage.py startapp blog 定义模型 # blog/models.py from django.db import models from django.utils import timezone class Post(models.Model): title = models.CharField(max_length=200) content = models.TextField() published_date = models.DateTimeField(default=timezone.now) def __str__(self): return self.title 创建视图 # blog/views.py from django.shortcuts import render from .models import Post def post_list(request): posts = Post.objects.all().order_by(\u0026#39;-published_date\u0026#39;) return render(request, \u0026#39;blog/post_list.html\u0026#39;, {\u0026#39;posts\u0026#39;: posts}) 配置 URL # blog/urls.py from django.urls import path from . import views urlpatterns = [ path(\u0026#39;\u0026#39;, views.post_list, name=\u0026#39;post_list\u0026#39;), ] 创建模板 \u0026lt;!-- blog/templates/blog/post_list.html --\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Blog\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Blog Posts\u0026lt;/h1\u0026gt; {% for post in posts %} \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;{{ post.title }}\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;{{ post.content }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Published: {{ post.published_date }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; {% endfor %} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 运行服务器 python manage.py runserver 总结 Django 是一个功能强大的 Web 框架，适合快速开发各种 Web 应用。通过本文的介绍，你应该对 Django 的基本使用有了初步了解。\n",
      "date": "0001-01-01T00:00:00Z",
      "lastmod": "0001-01-01T00:00:00Z",
      "section": "docs",
      "type": "docs",
      "kind": "page",
      "path": "/docs/programming/frameworks/django",
      "relpermalink": "/docs/programming/frameworks/django/",
      "parent": "框架",
      "ancestors": [{"title": "框架", "url": "/docs/programming/frameworks/"},{"title": "编程", "url": "/docs/programming/"},{"title": "技术文档", "url": "/docs/"},{"title": "全站内容", "url": "/"}],
      "categories": [],
      "tags": []
    },{
      "title": "Python 基础",
      "permalink": "http://localhost:1313/docs/programming/languages/python/",
      "summary": "Python 基础 Python 是一种易于学习、功能强大的编程语言。它具有高效的高级数据结构和简单但有效的面向对象编程方法。\nPython 特点 简洁清晰的语法 丰富的标准库 跨平台兼容性 强大的社区支持 基本语法 变量和数据类型 # 变量赋值 x = 10 name = \u0026#34;Python\u0026#34; is_awesome = True # 数据类型 print(type(x)) # \u0026lt;class \u0026#39;int\u0026#39;\u0026gt; print(type(name)) # \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; print(type(is_awesome)) # \u0026lt;class \u0026#39;bool\u0026#39;\u0026gt; 条件语句 age = 18 if age \u0026lt; 18: print(\u0026#34;未成年\u0026#34;) elif age == 18: print(\u0026#34;刚好成年\u0026#34;) else: print(\u0026#34;成年人\u0026#34;) 循环 # for 循环 for i in range(5): print(i) # 输出 0, 1, 2, 3, 4 # while 循环 count = 0 while count \u0026lt; 5: print(count) count += 1 函数 def greet(name): \u0026#34;\u0026#34;\u0026#34;简单的问候函数\u0026#34;\u0026#34;\u0026#34; return f\u0026#34;你好，{name}！\u0026#34; # 调用函数 message = greet(\u0026#34;世界\u0026#34;) print(message) # 输出：你好，世界！ 总结 Python 是一门非常适合初学者的语言，同时也被专业开发者广泛使用。通过本文的介绍，你应该对 Python 的基本语法有了初步了解。",
      "content": "Python 基础 Python 是一种易于学习、功能强大的编程语言。它具有高效的高级数据结构和简单但有效的面向对象编程方法。\nPython 特点 简洁清晰的语法 丰富的标准库 跨平台兼容性 强大的社区支持 基本语法 变量和数据类型 # 变量赋值 x = 10 name = \u0026#34;Python\u0026#34; is_awesome = True # 数据类型 print(type(x)) # \u0026lt;class \u0026#39;int\u0026#39;\u0026gt; print(type(name)) # \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; print(type(is_awesome)) # \u0026lt;class \u0026#39;bool\u0026#39;\u0026gt; 条件语句 age = 18 if age \u0026lt; 18: print(\u0026#34;未成年\u0026#34;) elif age == 18: print(\u0026#34;刚好成年\u0026#34;) else: print(\u0026#34;成年人\u0026#34;) 循环 # for 循环 for i in range(5): print(i) # 输出 0, 1, 2, 3, 4 # while 循环 count = 0 while count \u0026lt; 5: print(count) count += 1 函数 def greet(name): \u0026#34;\u0026#34;\u0026#34;简单的问候函数\u0026#34;\u0026#34;\u0026#34; return f\u0026#34;你好，{name}！\u0026#34; # 调用函数 message = greet(\u0026#34;世界\u0026#34;) print(message) # 输出：你好，世界！ 总结 Python 是一门非常适合初学者的语言，同时也被专业开发者广泛使用。通过本文的介绍，你应该对 Python 的基本语法有了初步了解。\n",
      "date": "0001-01-01T00:00:00Z",
      "lastmod": "0001-01-01T00:00:00Z",
      "section": "docs",
      "type": "docs",
      "kind": "page",
      "path": "/docs/programming/languages/python",
      "relpermalink": "/docs/programming/languages/python/",
      "parent": "编程语言",
      "ancestors": [{"title": "编程语言", "url": "/docs/programming/languages/"},{"title": "编程", "url": "/docs/programming/"},{"title": "技术文档", "url": "/docs/"},{"title": "全站内容", "url": "/"}],
      "categories": [],
      "tags": []
    },{
      "title": "健康追踪应用",
      "permalink": "http://localhost:1313/portfolio/mobileapps/app1/",
      "summary": "健康追踪应用 项目概述 开发了一款健康追踪应用，帮助用户记录和分析日常健康数据。\n功能特点 活动追踪（步数、距离、卡路里） 睡眠监测 饮食记录 健康数据分析和报告 个性化健康建议 技术栈 React Native Firebase Redux Native Device APIs Figma (UI/UX设计) 挑战与解决方案 挑战：需要处理和分析大量用户健康数据，同时保证应用性能和用户隐私。\n解决方案：\n实现高效的数据存储和检索机制 采用本地数据处理减少服务器负载 实施严格的数据加密和隐私保护措施 成果 应用商店评分 4.8/5 10万+ 下载量 用户平均每日使用时间 15 分钟 截图 ",
      "content": "健康追踪应用 项目概述 开发了一款健康追踪应用，帮助用户记录和分析日常健康数据。\n功能特点 活动追踪（步数、距离、卡路里） 睡眠监测 饮食记录 健康数据分析和报告 个性化健康建议 技术栈 React Native Firebase Redux Native Device APIs Figma (UI/UX设计) 挑战与解决方案 挑战：需要处理和分析大量用户健康数据，同时保证应用性能和用户隐私。\n解决方案：\n实现高效的数据存储和检索机制 采用本地数据处理减少服务器负载 实施严格的数据加密和隐私保护措施 成果 应用商店评分 4.8/5 10万+ 下载量 用户平均每日使用时间 15 分钟 截图 ",
      "date": "0001-01-01T00:00:00Z",
      "lastmod": "0001-01-01T00:00:00Z",
      "section": "portfolio",
      "type": "portfolio",
      "kind": "page",
      "path": "/portfolio/mobileapps/app1",
      "relpermalink": "/portfolio/mobileapps/app1/",
      "parent": "移动应用",
      "ancestors": [{"title": "移动应用", "url": "/portfolio/mobileapps/"},{"title": "作品集", "url": "/portfolio/"},{"title": "全站内容", "url": "/"}],
      "categories": [],
      "tags": []
    },{
      "title": "企业网站重设计",
      "permalink": "http://localhost:1313/portfolio/webdesign/project1/",
      "summary": "企业网站重设计 项目概述 为一家科技公司重新设计了企业网站，提升了用户体验和品牌形象。\n挑战 旧网站设计过时，不符合现代审美 移动端体验差 内容组织混乱，用户难以找到所需信息 解决方案 采用现代简约设计风格 实现响应式设计，优化移动端体验 重新组织内容结构，提升信息查找效率 技术栈 HTML5/CSS3 JavaScript Bootstrap Adobe XD (设计) 成果 网站访问量增加 35% 移动端用户停留时间增加 45% 客户咨询转化率提升 20% 截图 ",
      "content": "企业网站重设计 项目概述 为一家科技公司重新设计了企业网站，提升了用户体验和品牌形象。\n挑战 旧网站设计过时，不符合现代审美 移动端体验差 内容组织混乱，用户难以找到所需信息 解决方案 采用现代简约设计风格 实现响应式设计，优化移动端体验 重新组织内容结构，提升信息查找效率 技术栈 HTML5/CSS3 JavaScript Bootstrap Adobe XD (设计) 成果 网站访问量增加 35% 移动端用户停留时间增加 45% 客户咨询转化率提升 20% 截图 ",
      "date": "0001-01-01T00:00:00Z",
      "lastmod": "0001-01-01T00:00:00Z",
      "section": "portfolio",
      "type": "portfolio",
      "kind": "page",
      "path": "/portfolio/webdesign/project1",
      "relpermalink": "/portfolio/webdesign/project1/",
      "parent": "网页设计",
      "ancestors": [{"title": "网页设计", "url": "/portfolio/webdesign/"},{"title": "作品集", "url": "/portfolio/"},{"title": "全站内容", "url": "/"}],
      "categories": [],
      "tags": []
    },{
      "title": "图片展示示例",
      "permalink": "http://localhost:1313/docs/image-examples/",
      "summary": "图片展示示例 这个页面展示了美化后的图片显示功能，包括可折叠的图片和图片集。\n单张图片折叠 以下是单张图片折叠的示例：\n▼ Hugo Logo Hugo 静态网站生成器的标志 这是 Hugo 的官方标志。Hugo 是一个用 Go 语言编写的静态网站生成器，以其速度快和灵活性而闻名。 ▼ Go Gopher Go 语言的吉祥物 Gopher 这是 Go 语言的吉祥物 Gopher。Go 是一种开源编程语言，旨在提高程序员的生产力。\nGo 由 Google 开发 它是一种静态类型的编译语言 它的语法类似于 C，但具有垃圾收集、内存安全等特性 图片集折叠 以下是图片集折叠的示例：\n▼ 编程语言标志集 Python JavaScript C\u0026#43;\u0026#43; Ruby TypeScript C# ▼ 自然风景 山脉 海洋 森林 草原 使用说明 单张图片折叠 使用 image-fold shortcode 来创建可折叠的单张图片：\n{{\u0026lt; image-fold title=\u0026#34;图片标题\u0026#34; src=\u0026#34;图片URL\u0026#34; alt=\u0026#34;替代文本\u0026#34; caption=\u0026#34;图片说明\u0026#34; \u0026gt;}} 可选的图片描述文本（支持Markdown格式） {{\u0026lt; /image-fold \u0026gt;}} 如果希望默认展开，可以添加 open=true 参数。\n图片集折叠 使用 image-gallery 和 gallery-image shortcodes 来创建可折叠的图片集：",
      "content": "图片展示示例 这个页面展示了美化后的图片显示功能，包括可折叠的图片和图片集。\n单张图片折叠 以下是单张图片折叠的示例：\n▼ Hugo Logo Hugo 静态网站生成器的标志 这是 Hugo 的官方标志。Hugo 是一个用 Go 语言编写的静态网站生成器，以其速度快和灵活性而闻名。 ▼ Go Gopher Go 语言的吉祥物 Gopher 这是 Go 语言的吉祥物 Gopher。Go 是一种开源编程语言，旨在提高程序员的生产力。\nGo 由 Google 开发 它是一种静态类型的编译语言 它的语法类似于 C，但具有垃圾收集、内存安全等特性 图片集折叠 以下是图片集折叠的示例：\n▼ 编程语言标志集 Python JavaScript C\u0026#43;\u0026#43; Ruby TypeScript C# ▼ 自然风景 山脉 海洋 森林 草原 使用说明 单张图片折叠 使用 image-fold shortcode 来创建可折叠的单张图片：\n{{\u0026lt; image-fold title=\u0026#34;图片标题\u0026#34; src=\u0026#34;图片URL\u0026#34; alt=\u0026#34;替代文本\u0026#34; caption=\u0026#34;图片说明\u0026#34; \u0026gt;}} 可选的图片描述文本（支持Markdown格式） {{\u0026lt; /image-fold \u0026gt;}} 如果希望默认展开，可以添加 open=true 参数。\n图片集折叠 使用 image-gallery 和 gallery-image shortcodes 来创建可折叠的图片集：\n{{\u0026lt; image-gallery title=\u0026#34;图片集标题\u0026#34; \u0026gt;}} {{\u0026lt; gallery-image src=\u0026#34;图片1URL\u0026#34; caption=\u0026#34;图片1说明\u0026#34; \u0026gt;}} {{\u0026lt; gallery-image src=\u0026#34;图片2URL\u0026#34; caption=\u0026#34;图片2说明\u0026#34; \u0026gt;}} {{\u0026lt; gallery-image src=\u0026#34;图片3URL\u0026#34; caption=\u0026#34;图片3说明\u0026#34; \u0026gt;}} {{\u0026lt; /image-gallery \u0026gt;}} 同样，如果希望默认展开，可以添加 open=true 参数。\n特点 可折叠显示：点击标题栏可以展开或折叠图片内容 美观的样式：图片带有圆角和阴影效果 响应式设计：在不同屏幕尺寸下自动调整布局 图片说明：支持添加图片说明文字 点击放大：点击图片可以在模态框中查看大图 Markdown支持：在图片描述中可以使用Markdown格式 ",
      "date": "2023-03-25T00:00:00Z",
      "lastmod": "2023-03-25T00:00:00Z",
      "section": "docs",
      "type": "docs",
      "kind": "page",
      "path": "/docs/image-examples",
      "relpermalink": "/docs/image-examples/",
      "parent": "技术文档",
      "ancestors": [{"title": "技术文档", "url": "/docs/"},{"title": "全站内容", "url": "/"}],
      "categories": [],
      "tags": ["images","examples","gallery"]
    },{
      "title": "Markdown 示例",
      "permalink": "http://localhost:1313/docs/markdown-examples/",
      "summary": "Markdown 示例 这个页面展示了各种 Markdown 格式和特殊功能的示例。\n折叠式内容块 以下是折叠式内容块的示例，支持多种颜色选项：\n▶ 安装为 Git 子模块 克隆仓库到您的 Git 项目中： git submodule add https://github.com/username/theme.git themes/themename 初始化和更新子模块： git submodule init git submodule update ▶ 安装为 Hugo 模块 初始化 Hugo 模块系统： hugo mod init github.com/username/yourproject 在 config.toml 中添加主题： [module] [[module.imports]] path = \u0026#34;github.com/username/theme\u0026#34; 运行 Hugo 以下载模块： hugo ▼ 手动安装 下载最新版本的主题源代码。下载链接 解压缩归档文件，将文件夹重命名为 themename 并移动到 themes/ 目录中，位于您的 Hugo 项目的根文件夹中。 继续设置主题配置文件。 更多颜色选项 折叠块支持多种颜色选项，您可以通过 color 参数指定：\n▶ 紫色示例 这是一个紫色边框的折叠块。 ▶ 橙色示例 这是一个橙色边框的折叠块。 ▶ 青色示例 这是一个青色边框的折叠块。 ▶ 黄色示例 这是一个黄色边框的折叠块。 ▶ 粉色示例 这是一个粉色边框的折叠块。 ▶ 灰色示例 这是一个灰色边框的折叠块。 基本 Markdown 格式 文本格式 斜体文本 和 粗体文本",
      "content": "Markdown 示例 这个页面展示了各种 Markdown 格式和特殊功能的示例。\n折叠式内容块 以下是折叠式内容块的示例，支持多种颜色选项：\n▶ 安装为 Git 子模块 克隆仓库到您的 Git 项目中： git submodule add https://github.com/username/theme.git themes/themename 初始化和更新子模块： git submodule init git submodule update ▶ 安装为 Hugo 模块 初始化 Hugo 模块系统： hugo mod init github.com/username/yourproject 在 config.toml 中添加主题： [module] [[module.imports]] path = \u0026#34;github.com/username/theme\u0026#34; 运行 Hugo 以下载模块： hugo ▼ 手动安装 下载最新版本的主题源代码。下载链接 解压缩归档文件，将文件夹重命名为 themename 并移动到 themes/ 目录中，位于您的 Hugo 项目的根文件夹中。 继续设置主题配置文件。 更多颜色选项 折叠块支持多种颜色选项，您可以通过 color 参数指定：\n▶ 紫色示例 这是一个紫色边框的折叠块。 ▶ 橙色示例 这是一个橙色边框的折叠块。 ▶ 青色示例 这是一个青色边框的折叠块。 ▶ 黄色示例 这是一个黄色边框的折叠块。 ▶ 粉色示例 这是一个粉色边框的折叠块。 ▶ 灰色示例 这是一个灰色边框的折叠块。 基本 Markdown 格式 文本格式 斜体文本 和 粗体文本\n删除线文本\n列表 无序列表：\n项目 1 项目 2 子项目 2.1 子项目 2.2 项目 3 有序列表：\n第一项 第二项 子项 2.1 子项 2.2 第三项 链接和图片 Hugo 官网\n引用 这是一个引用。\n引用可以有多个段落。\n代码 内联代码：var example = \u0026quot;hello world\u0026quot;;\n代码块：\nfunction example() { console.log(\u0026#34;Hello, world!\u0026#34;); return true; } 表格 名称 描述 版本 Hugo 静态网站生成器 v0.92.0 Go 编程语言 v1.17 Markdown 标记语言 - 高级功能 任务列表 已完成任务 未完成任务 另一个未完成任务 脚注 这是一个带有脚注的文本1。\n定义列表 Hugo 一个快速且现代的静态网站生成器，用 Go 语言编写。 Markdown 一种轻量级标记语言，可以使用易读易写的纯文本格式编写文档。 这是脚注的内容。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n",
      "date": "2023-03-20T00:00:00Z",
      "lastmod": "2023-03-20T00:00:00Z",
      "section": "docs",
      "type": "docs",
      "kind": "page",
      "path": "/docs/markdown-examples",
      "relpermalink": "/docs/markdown-examples/",
      "parent": "技术文档",
      "ancestors": [{"title": "技术文档", "url": "/docs/"},{"title": "全站内容", "url": "/"}],
      "categories": [],
      "tags": ["markdown","examples","formatting"]
    },{
      "title": "Project 2: Mobile App Development",
      "permalink": "http://localhost:1313/portfolio/project2/",
      "summary": "Project 2: Mobile App Development Overview Development of a mobile application for task management and productivity.\nChallenge Creating an intuitive interface that allows users to quickly add and organize tasks while providing powerful features for power users.\nSolution I designed a clean, minimalist interface with a focus on speed and efficiency. The app uses gesture-based interactions for common tasks and provides advanced features through a simple but powerful settings menu.",
      "content": "Project 2: Mobile App Development Overview Development of a mobile application for task management and productivity.\nChallenge Creating an intuitive interface that allows users to quickly add and organize tasks while providing powerful features for power users.\nSolution I designed a clean, minimalist interface with a focus on speed and efficiency. The app uses gesture-based interactions for common tasks and provides advanced features through a simple but powerful settings menu.\nResults 4.8/5 star rating on app stores Featured in \u0026ldquo;Best Productivity Apps\u0026rdquo; lists 50,000+ downloads in the first month Technologies Used React Native Redux for state management Firebase for backend Figma for design ",
      "date": "2023-03-20T00:00:00Z",
      "lastmod": "2023-03-20T00:00:00Z",
      "section": "portfolio",
      "type": "portfolio",
      "kind": "page",
      "path": "/portfolio/project2",
      "relpermalink": "/portfolio/project2/",
      "parent": "作品集",
      "ancestors": [{"title": "作品集", "url": "/portfolio/"},{"title": "全站内容", "url": "/"}],
      "categories": [],
      "tags": ["mobile","app development","UI/UX"]
    },{
      "title": "代码示例",
      "permalink": "http://localhost:1313/docs/code-examples/",
      "summary": "代码示例 这个页面展示了不同编程语言的代码示例，用于测试代码块的样式。\nHTML 示例 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;HTML Example\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;styles.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;Welcome to My Website\u0026lt;/h1\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/about\u0026#34;\u0026gt;About\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/contact\u0026#34;\u0026gt;Contact\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;main\u0026gt; \u0026lt;section\u0026gt; \u0026lt;h2\u0026gt;About Us\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;This is a paragraph about our company.\u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;footer\u0026gt; \u0026lt;p\u0026gt;\u0026amp;copy; 2023 My Company\u0026lt;/p\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; CSS 示例 /* Basic reset */ * { margin: 0; padding: 0; box-sizing: border-box; } body { font-family: Arial, sans-serif; line-height: 1.",
      "content": "代码示例 这个页面展示了不同编程语言的代码示例，用于测试代码块的样式。\nHTML 示例 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;HTML Example\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;styles.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;Welcome to My Website\u0026lt;/h1\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/about\u0026#34;\u0026gt;About\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/contact\u0026#34;\u0026gt;Contact\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;main\u0026gt; \u0026lt;section\u0026gt; \u0026lt;h2\u0026gt;About Us\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;This is a paragraph about our company.\u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;footer\u0026gt; \u0026lt;p\u0026gt;\u0026amp;copy; 2023 My Company\u0026lt;/p\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; CSS 示例 /* Basic reset */ * { margin: 0; padding: 0; box-sizing: border-box; } body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; background-color: #f4f4f4; } header { background-color: #35424a; color: white; padding: 20px; border-bottom: 3px solid #e8491d; } nav ul { display: flex; list-style: none; } nav ul li { margin-right: 20px; } nav a { color: white; text-decoration: none; } main { padding: 30px; max-width: 1200px; margin: 0 auto; } section { margin-bottom: 30px; } h1, h2 { margin-bottom: 15px; } footer { background-color: #35424a; color: white; text-align: center; padding: 20px; margin-top: 40px; } JavaScript 示例 // Example of a class in JavaScript class Person { constructor(name, age) { this.name = name; this.age = age; } greet() { console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`); } static compareAges(person1, person2) { if (person1.age \u0026gt; person2.age) { return `${person1.name} is older than ${person2.name}`; } else if (person1.age \u0026lt; person2.age) { return `${person1.name} is younger than ${person2.name}`; } else { return `${person1.name} and ${person2.name} are the same age`; } } } // Creating instances const john = new Person(\u0026#39;John\u0026#39;, 30); const jane = new Person(\u0026#39;Jane\u0026#39;, 25); // Using methods john.greet(); // Output: Hello, my name is John and I am 30 years old. jane.greet(); // Output: Hello, my name is Jane and I am 25 years old. // Using static method console.log(Person.compareAges(john, jane)); // Output: John is older than Jane // Example of async/await async function fetchUserData(userId) { try { const response = await fetch(`https://api.example.com/users/${userId}`); if (!response.ok) { throw new Error(`HTTP error! Status: ${response.status}`); } const data = await response.json(); return data; } catch (error) { console.error(\u0026#39;Error fetching user data:\u0026#39;, error); return null; } } // Using the async function fetchUserData(123) .then(user =\u0026gt; { if (user) { console.log(\u0026#39;User data:\u0026#39;, user); } else { console.log(\u0026#39;Failed to fetch user data\u0026#39;); } }); Python 示例 # Example of a class in Python class Person: def __init__(self, name, age): self.name = name self.age = age def greet(self): print(f\u0026#34;Hello, my name is {self.name} and I am {self.age} years old.\u0026#34;) @staticmethod def compare_ages(person1, person2): if person1.age \u0026gt; person2.age: return f\u0026#34;{person1.name} is older than {person2.name}\u0026#34; elif person1.age \u0026lt; person2.age: return f\u0026#34;{person1.name} is younger than {person2.name}\u0026#34; else: return f\u0026#34;{person1.name} and {person2.name} are the same age\u0026#34; # Creating instances john = Person(\u0026#34;John\u0026#34;, 30) jane = Person(\u0026#34;Jane\u0026#34;, 25) # Using methods john.greet() # Output: Hello, my name is John and I am 30 years old. jane.greet() # Output: Hello, my name is Jane and I am 25 years old. # Using static method print(Person.compare_ages(john, jane)) # Output: John is older than Jane # Example of async function in Python (using asyncio) import asyncio import aiohttp async def fetch_user_data(user_id): try: async with aiohttp.ClientSession() as session: async with session.get(f\u0026#34;https://api.example.com/users/{user_id}\u0026#34;) as response: if response.status != 200: raise Exception(f\u0026#34;HTTP error! Status: {response.status}\u0026#34;) data = await response.json() return data except Exception as e: print(f\u0026#34;Error fetching user data: {e}\u0026#34;) return None # Using the async function async def main(): user = await fetch_user_data(123) if user: print(\u0026#34;User data:\u0026#34;, user) else: print(\u0026#34;Failed to fetch user data\u0026#34;) # Run the async function if __name__ == \u0026#34;__main__\u0026#34;: asyncio.run(main()) Go 示例 package main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io/ioutil\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;strconv\u0026#34; ) // Person struct type Person struct { Name string `json:\u0026#34;name\u0026#34;` Age int `json:\u0026#34;age\u0026#34;` } // Greet method for Person func (p *Person) Greet() { fmt.Printf(\u0026#34;Hello, my name is %s and I am %d years old.\\n\u0026#34;, p.Name, p.Age) } // CompareAges static function func CompareAges(person1, person2 *Person) string { if person1.Age \u0026gt; person2.Age { return fmt.Sprintf(\u0026#34;%s is older than %s\u0026#34;, person1.Name, person2.Name) } else if person1.Age \u0026lt; person2.Age { return fmt.Sprintf(\u0026#34;%s is younger than %s\u0026#34;, person1.Name, person2.Name) } else { return fmt.Sprintf(\u0026#34;%s and %s are the same age\u0026#34;, person1.Name, person2.Name) } } // FetchUserData function func FetchUserData(userID int) (*Person, error) { url := fmt.Sprintf(\u0026#34;https://api.example.com/users/%d\u0026#34;, userID) resp, err := http.Get(url) if err != nil { return nil, err } defer resp.Body.Close() if resp.StatusCode != http.StatusOK { return nil, fmt.Errorf(\u0026#34;HTTP error! Status: %d\u0026#34;, resp.StatusCode) } body, err := ioutil.ReadAll(resp.Body) if err != nil { return nil, err } var person Person err = json.Unmarshal(body, \u0026amp;person) if err != nil { return nil, err } return \u0026amp;person, nil } func main() { // Creating instances john := \u0026amp;Person{Name: \u0026#34;John\u0026#34;, Age: 30} jane := \u0026amp;Person{Name: \u0026#34;Jane\u0026#34;, Age: 25} // Using methods john.Greet() // Output: Hello, my name is John and I am 30 years old. jane.Greet() // Output: Hello, my name is Jane and I am 25 years old. // Using static function fmt.Println(CompareAges(john, jane)) // Output: John is older than Jane // Using FetchUserData userID := 123 user, err := FetchUserData(userID) if err != nil { fmt.Printf(\u0026#34;Error fetching user data: %v\\n\u0026#34;, err) } else { fmt.Printf(\u0026#34;User data: %+v\\n\u0026#34;, user) } } SQL 示例 -- Create a users table CREATE TABLE users ( id SERIAL PRIMARY KEY, name VARCHAR(100) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, age INT CHECK (age \u0026gt;= 0), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ); -- Insert some users INSERT INTO users (name, email, age) VALUES (\u0026#39;John Doe\u0026#39;, \u0026#39;john@example.com\u0026#39;, 30), (\u0026#39;Jane Smith\u0026#39;, \u0026#39;jane@example.com\u0026#39;, 25), (\u0026#39;Bob Johnson\u0026#39;, \u0026#39;bob@example.com\u0026#39;, 35); -- Select all users SELECT * FROM users; -- Select users with age greater than 30 SELECT name, email, age FROM users WHERE age \u0026gt; 30; -- Update a user\u0026#39;s email UPDATE users SET email = \u0026#39;john.doe@example.com\u0026#39; WHERE id = 1; -- Join users with their orders SELECT u.name, o.order_id, o.total_amount FROM users u JOIN orders o ON u.id = o.user_id WHERE o.order_date \u0026gt; \u0026#39;2023-01-01\u0026#39; ORDER BY o.order_date DESC; -- Create a view for active users CREATE VIEW active_users AS SELECT id, name, email FROM users WHERE last_login_date \u0026gt; CURRENT_DATE - INTERVAL \u0026#39;30 days\u0026#39;; -- Create a stored procedure CREATE PROCEDURE update_user_age(user_id INT, new_age INT) LANGUAGE plpgsql AS $$ BEGIN UPDATE users SET age = new_age WHERE id = user_id; COMMIT; END; $$; -- Call the stored procedure CALL update_user_age(1, 31); JSON 示例 { \u0026#34;users\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;john@example.com\u0026#34;, \u0026#34;age\u0026#34;: 30, \u0026#34;address\u0026#34;: { \u0026#34;street\u0026#34;: \u0026#34;123 Main St\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;New York\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;NY\u0026#34;, \u0026#34;zipCode\u0026#34;: \u0026#34;10001\u0026#34; }, \u0026#34;phoneNumbers\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;home\u0026#34;, \u0026#34;number\u0026#34;: \u0026#34;212-555-1234\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;work\u0026#34;, \u0026#34;number\u0026#34;: \u0026#34;646-555-5678\u0026#34; } ], \u0026#34;isActive\u0026#34;: true, \u0026#34;roles\u0026#34;: [\u0026#34;user\u0026#34;, \u0026#34;admin\u0026#34;] }, { \u0026#34;id\u0026#34;: 2, \u0026#34;name\u0026#34;: \u0026#34;Jane Smith\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;jane@example.com\u0026#34;, \u0026#34;age\u0026#34;: 25, \u0026#34;address\u0026#34;: { \u0026#34;street\u0026#34;: \u0026#34;456 Park Ave\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Boston\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;MA\u0026#34;, \u0026#34;zipCode\u0026#34;: \u0026#34;02101\u0026#34; }, \u0026#34;phoneNumbers\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;mobile\u0026#34;, \u0026#34;number\u0026#34;: \u0026#34;617-555-9876\u0026#34; } ], \u0026#34;isActive\u0026#34;: true, \u0026#34;roles\u0026#34;: [\u0026#34;user\u0026#34;] } ], \u0026#34;metadata\u0026#34;: { \u0026#34;totalCount\u0026#34;: 2, \u0026#34;lastUpdated\u0026#34;: \u0026#34;2023-03-15T12:00:00Z\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34; }, \u0026#34;settings\u0026#34;: { \u0026#34;theme\u0026#34;: \u0026#34;dark\u0026#34;, \u0026#34;notifications\u0026#34;: { \u0026#34;email\u0026#34;: true, \u0026#34;push\u0026#34;: false }, \u0026#34;language\u0026#34;: \u0026#34;en-US\u0026#34; } } ",
      "date": "2023-03-15T00:00:00Z",
      "lastmod": "2023-03-15T00:00:00Z",
      "section": "docs",
      "type": "docs",
      "kind": "page",
      "path": "/docs/code-examples",
      "relpermalink": "/docs/code-examples/",
      "parent": "技术文档",
      "ancestors": [{"title": "技术文档", "url": "/docs/"},{"title": "全站内容", "url": "/"}],
      "categories": [],
      "tags": ["code","examples","programming"]
    },{
      "title": "API Reference",
      "permalink": "http://localhost:1313/docs/api-reference/",
      "summary": "API Reference Introduction This document provides a comprehensive reference for our REST API.\nAuthentication All API requests require authentication using an API key. Include your API key in the header of each request:\nAuthorization: Bearer YOUR_API_KEY Endpoints Users Get User GET /api/v1/users/{user_id} Returns information about a specific user.\nParameters:\nuser_id (required): The ID of the user to retrieve Response:\n{ \u0026#34;id\u0026#34;: \u0026#34;123456\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;johndoe\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;john@example.com\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-01-15T12:00:00Z\u0026#34; } Create User POST /api/v1/users Creates a new user.",
      "content": "API Reference Introduction This document provides a comprehensive reference for our REST API.\nAuthentication All API requests require authentication using an API key. Include your API key in the header of each request:\nAuthorization: Bearer YOUR_API_KEY Endpoints Users Get User GET /api/v1/users/{user_id} Returns information about a specific user.\nParameters:\nuser_id (required): The ID of the user to retrieve Response:\n{ \u0026#34;id\u0026#34;: \u0026#34;123456\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;johndoe\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;john@example.com\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-01-15T12:00:00Z\u0026#34; } Create User POST /api/v1/users Creates a new user.\nRequest Body:\n{ \u0026#34;username\u0026#34;: \u0026#34;newuser\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;newuser@example.com\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;securepassword\u0026#34; } Response:\n{ \u0026#34;id\u0026#34;: \u0026#34;789012\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;newuser\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;newuser@example.com\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-02-15T14:30:00Z\u0026#34; } Projects List Projects GET /api/v1/projects Returns a list of projects for the authenticated user.\nParameters:\npage (optional): Page number for pagination (default: 1) limit (optional): Number of results per page (default: 20) Response:\n{ \u0026#34;total\u0026#34;: 42, \u0026#34;page\u0026#34;: 1, \u0026#34;limit\u0026#34;: 20, \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;project-123\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;My Project\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Project description\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-01-10T09:00:00Z\u0026#34; }, // More projects... ] } Error Handling The API uses standard HTTP status codes to indicate the success or failure of a request.\nCommon error codes:\n400 Bad Request: The request was malformed 401 Unauthorized: Authentication failed 403 Forbidden: The authenticated user doesn\u0026rsquo;t have permission 404 Not Found: The requested resource doesn\u0026rsquo;t exist 429 Too Many Requests: Rate limit exceeded 500 Internal Server Error: Something went wrong on the server Error responses include a JSON body with more details:\n{ \u0026#34;error\u0026#34;: { \u0026#34;code\u0026#34;: \u0026#34;invalid_request\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;The request was invalid\u0026#34;, \u0026#34;details\u0026#34;: \u0026#34;The \u0026#39;username\u0026#39; field is required\u0026#34; } } Rate Limiting API requests are limited to 100 requests per minute per API key. If you exceed this limit, you\u0026rsquo;ll receive a 429 Too Many Requests response.\nThe response headers include information about your rate limit status:\nX-RateLimit-Limit: The maximum number of requests allowed per minute X-RateLimit-Remaining: The number of requests remaining in the current window X-RateLimit-Reset: The time at which the current rate limit window resets, in UTC epoch seconds ",
      "date": "2023-02-15T00:00:00Z",
      "lastmod": "2023-02-15T00:00:00Z",
      "section": "docs",
      "type": "docs",
      "kind": "page",
      "path": "/docs/api-reference",
      "relpermalink": "/docs/api-reference/",
      "parent": "技术文档",
      "ancestors": [{"title": "技术文档", "url": "/docs/"},{"title": "全站内容", "url": "/"}],
      "categories": [],
      "tags": ["api","reference","development"]
    },{
      "title": "Getting Started Guide",
      "permalink": "http://localhost:1313/docs/getting-started/",
      "summary": "Getting Started Guide Introduction This guide will help you get started with our platform quickly and efficiently.\nPrerequisites Before you begin, make sure you have the following:\nA modern web browser (Chrome, Firefox, Safari, or Edge) An account on our platform Basic understanding of web technologies Installation Download the software from our website Extract the files to your desired location Run the setup program Follow the on-screen instructions Configuration Basic Configuration Open the config.",
      "content": "Getting Started Guide Introduction This guide will help you get started with our platform quickly and efficiently.\nPrerequisites Before you begin, make sure you have the following:\nA modern web browser (Chrome, Firefox, Safari, or Edge) An account on our platform Basic understanding of web technologies Installation Download the software from our website Extract the files to your desired location Run the setup program Follow the on-screen instructions Configuration Basic Configuration Open the config.json file and modify the following settings:\n{ \u0026#34;username\u0026#34;: \u0026#34;your_username\u0026#34;, \u0026#34;api_key\u0026#34;: \u0026#34;your_api_key\u0026#34;, \u0026#34;theme\u0026#34;: \u0026#34;light\u0026#34; } Advanced Configuration For advanced users, additional settings can be configured in the advanced.json file.\nUsage To start using the platform, follow these steps:\nOpen the application Log in with your credentials Navigate to the dashboard Create your first project Troubleshooting If you encounter any issues, check the following:\nMake sure your internet connection is stable Verify that your credentials are correct Clear your browser cache Check our FAQ section for common issues Next Steps Now that you\u0026rsquo;re set up, you might want to explore:\nAdvanced Features API Documentation Best Practices ",
      "date": "2023-02-10T00:00:00Z",
      "lastmod": "2023-02-10T00:00:00Z",
      "section": "docs",
      "type": "docs",
      "kind": "page",
      "path": "/docs/getting-started",
      "relpermalink": "/docs/getting-started/",
      "parent": "技术文档",
      "ancestors": [{"title": "技术文档", "url": "/docs/"},{"title": "全站内容", "url": "/"}],
      "categories": [],
      "tags": ["tutorial","beginner","setup"]
    },{
      "title": "数据库基础",
      "permalink": "http://localhost:1313/docs/backend/database-basics/",
      "summary": "数据库基础 数据库是有组织地存储和管理数据的系统。在现代应用程序开发中，数据库扮演着至关重要的角色。\n数据库类型 主要的数据库类型包括：\n关系型数据库 关系型数据库基于关系模型，使用表格存储数据：\nMySQL PostgreSQL SQLite Oracle SQL Server NoSQL数据库 NoSQL数据库不使用传统的表格模型：\n文档数据库（MongoDB） 键值存储（Redis） 列存储（Cassandra） 图数据库（Neo4j） SQL基础 SQL（结构化查询语言）是用于管理关系型数据库的标准语言。\n创建表 CREATE TABLE users ( id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ); 插入数据 INSERT INTO users (id, username, email) VALUES (1, \u0026#39;johndoe\u0026#39;, \u0026#39;john@example.com\u0026#39;); 查询数据 -- 查询所有用户 SELECT * FROM users; -- 条件查询 SELECT username, email FROM users WHERE id = 1; 更新数据 UPDATE users SET email = \u0026#39;newemail@example.",
      "content": "数据库基础 数据库是有组织地存储和管理数据的系统。在现代应用程序开发中，数据库扮演着至关重要的角色。\n数据库类型 主要的数据库类型包括：\n关系型数据库 关系型数据库基于关系模型，使用表格存储数据：\nMySQL PostgreSQL SQLite Oracle SQL Server NoSQL数据库 NoSQL数据库不使用传统的表格模型：\n文档数据库（MongoDB） 键值存储（Redis） 列存储（Cassandra） 图数据库（Neo4j） SQL基础 SQL（结构化查询语言）是用于管理关系型数据库的标准语言。\n创建表 CREATE TABLE users ( id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ); 插入数据 INSERT INTO users (id, username, email) VALUES (1, \u0026#39;johndoe\u0026#39;, \u0026#39;john@example.com\u0026#39;); 查询数据 -- 查询所有用户 SELECT * FROM users; -- 条件查询 SELECT username, email FROM users WHERE id = 1; 更新数据 UPDATE users SET email = \u0026#39;newemail@example.com\u0026#39; WHERE id = 1; 删除数据 DELETE FROM users WHERE id = 1; 数据库设计原则 规范化 规范化是一种减少数据冗余和提高数据完整性的过程：\n第一范式（1NF）：每个表格单元格都应该包含单一值 第二范式（2NF）：满足1NF，并且所有非主键属性完全依赖于主键 第三范式（3NF）：满足2NF，并且所有非主键属性都不传递依赖于主键 索引 索引用于提高数据库查询性能：\n-- 创建索引 CREATE INDEX idx_username ON users(username); 事务 事务是一组操作，要么全部成功，要么全部失败：\nBEGIN TRANSACTION; UPDATE accounts SET balance = balance - 100 WHERE id = 1; UPDATE accounts SET balance = balance + 100 WHERE id = 2; COMMIT; 数据库连接 不同编程语言连接数据库的示例：\nPython (使用SQLite) import sqlite3 # 连接到数据库 conn = sqlite3.connect(\u0026#39;example.db\u0026#39;) cursor = conn.cursor() # 执行查询 cursor.execute(\u0026#39;SELECT * FROM users\u0026#39;) users = cursor.fetchall() # 关闭连接 conn.close() Node.js (使用MySQL) const mysql = require(\u0026#39;mysql\u0026#39;); // 创建连接 const connection = mysql.createConnection({ host: \u0026#39;localhost\u0026#39;, user: \u0026#39;user\u0026#39;, password: \u0026#39;password\u0026#39;, database: \u0026#39;mydb\u0026#39; }); // 连接数据库 connection.connect(); // 执行查询 connection.query(\u0026#39;SELECT * FROM users\u0026#39;, (error, results) =\u0026gt; { if (error) throw error; console.log(results); }); // 关闭连接 connection.end(); 总结 数据库是现代应用程序的核心组件。理解数据库基础知识对于后端开发至关重要。通过本文的介绍，你应该对数据库的基本概念和操作有了初步了解。\n",
      "date": "2023-02-10T00:00:00Z",
      "lastmod": "2023-02-10T00:00:00Z",
      "section": "docs",
      "type": "docs",
      "kind": "page",
      "path": "/docs/backend/database-basics",
      "relpermalink": "/docs/backend/database-basics/",
      "parent": "技术文档",
      "ancestors": [{"title": "技术文档", "url": "/docs/"},{"title": "全站内容", "url": "/"}],
      "categories": ["programming","backend","database"],
      "tags": ["数据库","后端","SQL"]
    },{
      "title": "HTML 基础",
      "permalink": "http://localhost:1313/docs/frontend/html-basics/",
      "summary": "HTML 基础 HTML（超文本标记语言）是创建网页的标准标记语言。通过HTML，你可以创建自己的网站。\nHTML 文档结构 一个基本的HTML文档结构如下：\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;页面标题\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;我的第一个标题\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;我的第一个段落。\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; HTML 元素 HTML 元素由开始标签、内容和结束标签组成：\n\u0026lt;tagname\u0026gt;内容\u0026lt;/tagname\u0026gt; 常见的HTML元素包括：\n标题 HTML提供了六级标题，从\u0026lt;h1\u0026gt;到\u0026lt;h6\u0026gt;：\n\u0026lt;h1\u0026gt;这是一级标题\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;这是二级标题\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;这是三级标题\u0026lt;/h3\u0026gt; 段落 段落使用\u0026lt;p\u0026gt;标签定义：\n\u0026lt;p\u0026gt;这是一个段落。\u0026lt;/p\u0026gt; 链接 链接使用\u0026lt;a\u0026gt;标签定义：\n\u0026lt;a href=\u0026#34;https://www.example.com\u0026#34;\u0026gt;这是一个链接\u0026lt;/a\u0026gt; 图片 图片使用\u0026lt;img\u0026gt;标签插入：\n\u0026lt;img src=\u0026#34;image.jpg\u0026#34; alt=\u0026#34;图片描述\u0026#34; width=\u0026#34;500\u0026#34; height=\u0026#34;300\u0026#34;\u0026gt; HTML 属性 HTML属性提供了有关HTML元素的附加信息：\n属性总是在开始标签中指定 属性通常以名称/值对的形式出现，如：name=\u0026ldquo;value\u0026rdquo; 例如，链接的地址在href属性中指定：\n\u0026lt;a href=\u0026#34;https://www.example.com\u0026#34;\u0026gt;这是一个链接\u0026lt;/a\u0026gt; HTML 表单 HTML表单用于收集用户输入：\n\u0026lt;form action=\u0026#34;/submit-form\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;name\u0026#34;\u0026gt;姓名：\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;name\u0026#34; name=\u0026#34;name\u0026#34;\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;label for=\u0026#34;email\u0026#34;\u0026gt;邮箱：\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;email\u0026#34; id=\u0026#34;email\u0026#34; name=\u0026#34;email\u0026#34;\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;提交\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; HTML5 新特性 HTML5引入了许多新元素和属性，如：",
      "content": "HTML 基础 HTML（超文本标记语言）是创建网页的标准标记语言。通过HTML，你可以创建自己的网站。\nHTML 文档结构 一个基本的HTML文档结构如下：\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;页面标题\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;我的第一个标题\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;我的第一个段落。\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; HTML 元素 HTML 元素由开始标签、内容和结束标签组成：\n\u0026lt;tagname\u0026gt;内容\u0026lt;/tagname\u0026gt; 常见的HTML元素包括：\n标题 HTML提供了六级标题，从\u0026lt;h1\u0026gt;到\u0026lt;h6\u0026gt;：\n\u0026lt;h1\u0026gt;这是一级标题\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;这是二级标题\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;这是三级标题\u0026lt;/h3\u0026gt; 段落 段落使用\u0026lt;p\u0026gt;标签定义：\n\u0026lt;p\u0026gt;这是一个段落。\u0026lt;/p\u0026gt; 链接 链接使用\u0026lt;a\u0026gt;标签定义：\n\u0026lt;a href=\u0026#34;https://www.example.com\u0026#34;\u0026gt;这是一个链接\u0026lt;/a\u0026gt; 图片 图片使用\u0026lt;img\u0026gt;标签插入：\n\u0026lt;img src=\u0026#34;image.jpg\u0026#34; alt=\u0026#34;图片描述\u0026#34; width=\u0026#34;500\u0026#34; height=\u0026#34;300\u0026#34;\u0026gt; HTML 属性 HTML属性提供了有关HTML元素的附加信息：\n属性总是在开始标签中指定 属性通常以名称/值对的形式出现，如：name=\u0026ldquo;value\u0026rdquo; 例如，链接的地址在href属性中指定：\n\u0026lt;a href=\u0026#34;https://www.example.com\u0026#34;\u0026gt;这是一个链接\u0026lt;/a\u0026gt; HTML 表单 HTML表单用于收集用户输入：\n\u0026lt;form action=\u0026#34;/submit-form\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;name\u0026#34;\u0026gt;姓名：\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;name\u0026#34; name=\u0026#34;name\u0026#34;\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;label for=\u0026#34;email\u0026#34;\u0026gt;邮箱：\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;email\u0026#34; id=\u0026#34;email\u0026#34; name=\u0026#34;email\u0026#34;\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;提交\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; HTML5 新特性 HTML5引入了许多新元素和属性，如：\n语义化元素：\u0026lt;header\u0026gt;, \u0026lt;footer\u0026gt;, \u0026lt;article\u0026gt;, \u0026lt;section\u0026gt; 表单控件：\u0026lt;datalist\u0026gt;, \u0026lt;output\u0026gt; 图形元素：\u0026lt;canvas\u0026gt;, \u0026lt;svg\u0026gt; 多媒体元素：\u0026lt;audio\u0026gt;, \u0026lt;video\u0026gt; 总结 HTML是网页开发的基础，掌握HTML对于前端开发至关重要。通过本文的介绍，你应该对HTML的基本结构和常用元素有了初步了解。\n",
      "date": "2023-02-05T00:00:00Z",
      "lastmod": "2023-02-05T00:00:00Z",
      "section": "docs",
      "type": "docs",
      "kind": "page",
      "path": "/docs/frontend/html-basics",
      "relpermalink": "/docs/frontend/html-basics/",
      "parent": "技术文档",
      "ancestors": [{"title": "技术文档", "url": "/docs/"},{"title": "全站内容", "url": "/"}],
      "categories": ["programming","frontend","html"],
      "tags": ["HTML","前端","Web开发"]
    },{
      "title": "Project 1: Website Redesign",
      "permalink": "http://localhost:1313/portfolio/project1/",
      "summary": "Project 1: Website Redesign Overview This project involved redesigning a client\u0026rsquo;s website to improve user experience and modernize the visual design.\nChallenge The client\u0026rsquo;s existing website was outdated, not mobile-friendly, and had poor navigation that made it difficult for users to find information.\nSolution I created a responsive design with a clean, minimalist aesthetic that works well on all devices. The new navigation structure makes it easy for users to find what they\u0026rsquo;re looking for.",
      "content": "Project 1: Website Redesign Overview This project involved redesigning a client\u0026rsquo;s website to improve user experience and modernize the visual design.\nChallenge The client\u0026rsquo;s existing website was outdated, not mobile-friendly, and had poor navigation that made it difficult for users to find information.\nSolution I created a responsive design with a clean, minimalist aesthetic that works well on all devices. The new navigation structure makes it easy for users to find what they\u0026rsquo;re looking for.\nResults 40% increase in mobile traffic 25% decrease in bounce rate 15% increase in average session duration Technologies Used HTML5/CSS3 JavaScript Figma for design Responsive design principles ",
      "date": "2023-01-15T00:00:00Z",
      "lastmod": "2023-01-15T00:00:00Z",
      "section": "portfolio",
      "type": "portfolio",
      "kind": "page",
      "path": "/portfolio/project1",
      "relpermalink": "/portfolio/project1/",
      "parent": "作品集",
      "ancestors": [{"title": "作品集", "url": "/portfolio/"},{"title": "全站内容", "url": "/"}],
      "categories": [],
      "tags": ["web design","UI/UX","responsive"]
    },{
      "title": "编程",
      "permalink": "http://localhost:1313/docs/programming/",
      "summary": "编程 这个部分包含了各种编程相关的文档和教程。\n编程概述 编程是创建计算机程序的过程，这些程序能够执行特定任务或解决特定问题。\n编程范式 编程范式是编程的基本风格或方法。主要的编程范式包括：\n命令式编程 命令式编程关注于如何执行任务，通过详细描述计算机应该执行的步骤来解决问题。\n声明式编程 声明式编程关注于要做什么，而不是如何做。它描述程序的逻辑而不指定控制流。\n编程语言分类 编程语言可以按照多种方式分类：\n按照抽象级别 低级语言：如汇编语言 高级语言：如Python、Java、C++ 按照编译方式 编译型语言：如C、C++ 解释型语言：如Python、JavaScript 混合型语言：如Java 学习编程 学习编程需要理解基本概念、语法和最佳实践。\n基础概念 变量和数据类型 控制结构 函数和模块 算法和数据结构 进阶主题 面向对象编程 函数式编程 并发和并行编程 设计模式 ",
      "content": "编程 这个部分包含了各种编程相关的文档和教程。\n编程概述 编程是创建计算机程序的过程，这些程序能够执行特定任务或解决特定问题。\n编程范式 编程范式是编程的基本风格或方法。主要的编程范式包括：\n命令式编程 命令式编程关注于如何执行任务，通过详细描述计算机应该执行的步骤来解决问题。\n声明式编程 声明式编程关注于要做什么，而不是如何做。它描述程序的逻辑而不指定控制流。\n编程语言分类 编程语言可以按照多种方式分类：\n按照抽象级别 低级语言：如汇编语言 高级语言：如Python、Java、C++ 按照编译方式 编译型语言：如C、C++ 解释型语言：如Python、JavaScript 混合型语言：如Java 学习编程 学习编程需要理解基本概念、语法和最佳实践。\n基础概念 变量和数据类型 控制结构 函数和模块 算法和数据结构 进阶主题 面向对象编程 函数式编程 并发和并行编程 设计模式 ",
      "date": "0001-01-01T00:00:00Z",
      "lastmod": "0001-01-01T00:00:00Z",
      "section": "docs",
      "type": "docs",
      "kind": "section",
      "path": "/docs/programming",
      "relpermalink": "/docs/programming/",
      "parent": "技术文档",
      "ancestors": [{"title": "技术文档", "url": "/docs/"},{"title": "全站内容", "url": "/"}],
      "categories": [],
      "tags": []
    },{
      "title": "编程语言",
      "permalink": "http://localhost:1313/docs/programming/languages/",
      "summary": "编程语言 这个部分包含了各种编程语言的文档和教程。",
      "content": "编程语言 这个部分包含了各种编程语言的文档和教程。\n",
      "date": "0001-01-01T00:00:00Z",
      "lastmod": "0001-01-01T00:00:00Z",
      "section": "docs",
      "type": "docs",
      "kind": "section",
      "path": "/docs/programming/languages",
      "relpermalink": "/docs/programming/languages/",
      "parent": "编程",
      "ancestors": [{"title": "编程", "url": "/docs/programming/"},{"title": "技术文档", "url": "/docs/"},{"title": "全站内容", "url": "/"}],
      "categories": [],
      "tags": []
    },{
      "title": "网页设计",
      "permalink": "http://localhost:1313/portfolio/webdesign/",
      "summary": "网页设计作品 这个部分展示了我的网页设计作品。",
      "content": "网页设计作品 这个部分展示了我的网页设计作品。\n",
      "date": "0001-01-01T00:00:00Z",
      "lastmod": "0001-01-01T00:00:00Z",
      "section": "portfolio",
      "type": "portfolio",
      "kind": "section",
      "path": "/portfolio/webdesign",
      "relpermalink": "/portfolio/webdesign/",
      "parent": "作品集",
      "ancestors": [{"title": "作品集", "url": "/portfolio/"},{"title": "全站内容", "url": "/"}],
      "categories": [],
      "tags": []
    },{
      "title": "框架",
      "permalink": "http://localhost:1313/docs/programming/frameworks/",
      "summary": "编程框架 这个部分包含了各种编程框架的文档和教程。",
      "content": "编程框架 这个部分包含了各种编程框架的文档和教程。\n",
      "date": "0001-01-01T00:00:00Z",
      "lastmod": "0001-01-01T00:00:00Z",
      "section": "docs",
      "type": "docs",
      "kind": "section",
      "path": "/docs/programming/frameworks",
      "relpermalink": "/docs/programming/frameworks/",
      "parent": "编程",
      "ancestors": [{"title": "编程", "url": "/docs/programming/"},{"title": "技术文档", "url": "/docs/"},{"title": "全站内容", "url": "/"}],
      "categories": [],
      "tags": []
    },{
      "title": "移动应用",
      "permalink": "http://localhost:1313/portfolio/mobileapps/",
      "summary": "移动应用作品 这个部分展示了我的移动应用开发作品。",
      "content": "移动应用作品 这个部分展示了我的移动应用开发作品。\n",
      "date": "0001-01-01T00:00:00Z",
      "lastmod": "0001-01-01T00:00:00Z",
      "section": "portfolio",
      "type": "portfolio",
      "kind": "section",
      "path": "/portfolio/mobileapps",
      "relpermalink": "/portfolio/mobileapps/",
      "parent": "作品集",
      "ancestors": [{"title": "作品集", "url": "/portfolio/"},{"title": "全站内容", "url": "/"}],
      "categories": [],
      "tags": []
    },{
      "title": "技术文档",
      "permalink": "http://localhost:1313/docs/",
      "summary": "Technical Documentation Welcome to the technical documentation section. Here you\u0026rsquo;ll find comprehensive guides, tutorials, and technical documentation for various projects and technologies.\nDocumentation Categories Our documentation is organized into several main categories:\nFrontend Development Documentation related to frontend technologies including:\nHTML/CSS fundamentals and best practices JavaScript programming guides Frontend frameworks and libraries Responsive design techniques Backend Development Resources for server-side programming:\nDatabase design and management API development and integration Server configuration and deployment Performance optimization techniques How to Use This Documentation Each documentation article follows a consistent structure:",
      "content": "Technical Documentation Welcome to the technical documentation section. Here you\u0026rsquo;ll find comprehensive guides, tutorials, and technical documentation for various projects and technologies.\nDocumentation Categories Our documentation is organized into several main categories:\nFrontend Development Documentation related to frontend technologies including:\nHTML/CSS fundamentals and best practices JavaScript programming guides Frontend frameworks and libraries Responsive design techniques Backend Development Resources for server-side programming:\nDatabase design and management API development and integration Server configuration and deployment Performance optimization techniques How to Use This Documentation Each documentation article follows a consistent structure:\nIntroduction: Overview of the topic and what you\u0026rsquo;ll learn Prerequisites: What you need to know before starting Step-by-step guide: Detailed instructions with code examples Troubleshooting: Common issues and their solutions Further reading: Additional resources for deeper learning Contributing to the Documentation We welcome contributions to improve and expand our documentation. If you find errors, outdated information, or want to add new content, please follow these steps:\nFork the repository Make your changes Submit a pull request with a clear description of your improvements Recently Updated Documentation Below you\u0026rsquo;ll find our most recently updated documentation articles. We regularly review and update our content to ensure it remains accurate and relevant.\n",
      "date": "2023-01-05T00:00:00Z",
      "lastmod": "2023-01-05T00:00:00Z",
      "section": "docs",
      "type": "docs",
      "kind": "section",
      "path": "/docs",
      "relpermalink": "/docs/",
      "parent": "全站内容",
      "ancestors": [{"title": "全站内容", "url": "/"}],
      "categories": [],
      "tags": ["文档","指南","教程","技术"]
    },{
      "title": "作品集",
      "permalink": "http://localhost:1313/portfolio/",
      "summary": "Portfolio Welcome to my portfolio section. Here you\u0026rsquo;ll find a showcase of my projects and creative works. I\u0026rsquo;ve been working on a variety of projects across different domains, from web design to mobile app development.\nWhat You\u0026rsquo;ll Find Here This portfolio is organized to help you easily navigate through my work:\nWeb Design Projects: Websites and web applications I\u0026rsquo;ve designed and developed Mobile Applications: iOS and Android apps I\u0026rsquo;ve created UI/UX Design Work: User interface and experience design projects Graphic Design: Logos, branding, and other graphic design work My Approach I believe in creating work that is not only visually appealing but also functional and user-friendly.",
      "content": "Portfolio Welcome to my portfolio section. Here you\u0026rsquo;ll find a showcase of my projects and creative works. I\u0026rsquo;ve been working on a variety of projects across different domains, from web design to mobile app development.\nWhat You\u0026rsquo;ll Find Here This portfolio is organized to help you easily navigate through my work:\nWeb Design Projects: Websites and web applications I\u0026rsquo;ve designed and developed Mobile Applications: iOS and Android apps I\u0026rsquo;ve created UI/UX Design Work: User interface and experience design projects Graphic Design: Logos, branding, and other graphic design work My Approach I believe in creating work that is not only visually appealing but also functional and user-friendly. My design philosophy centers around these key principles:\nUser-Centered Design: Always putting the end user\u0026rsquo;s needs first Clean Aesthetics: Creating visually balanced and uncluttered designs Functionality: Ensuring that form follows function Accessibility: Making sure my work is accessible to all users Featured Projects Below you\u0026rsquo;ll find a selection of my most recent and notable projects. Each project page includes details about the challenge, my approach, and the results achieved.\nFeel free to browse through the projects and reach out if you have any questions or would like to discuss potential collaborations.\n",
      "date": "2023-01-01T00:00:00Z",
      "lastmod": "2023-01-01T00:00:00Z",
      "section": "portfolio",
      "type": "portfolio",
      "kind": "section",
      "path": "/portfolio",
      "relpermalink": "/portfolio/",
      "parent": "全站内容",
      "ancestors": [{"title": "全站内容", "url": "/"}],
      "categories": [],
      "tags": ["作品集","项目","展示"]
    }]
